import com.pocolifo.minecraftapi.request.template.VersionMetadataTemplate
import com.pocolifo.obfuscator.engine.util.obfstring.ObfuscatedStringSupplier
import com.pocolifo.obfuscator.engine.util.obfstring.TwoLetterObfuscatedStringSupplier
import com.pocolifo.pocolifoclient.installer.library.Hosts
import com.pocolifo.pocolifoclient.installer.library.Installation
import com.pocolifo.pocolifoclient.installer.library.InstallationOptions
import com.pocolifo.pocolifoclient.installer.library.library.plc.PocolifoClientInstallation
import com.pocolifo.pocolifoclient.installer.library.library.plc.PocolifoClientLauncherProfile
import com.pocolifo.pocolifoclient.installer.library.library.plc.PocolifoClientVersion
import com.pocolifo.pocolifoclient.installer.library.library.plc.PocolifoClientVersionTemplate

import java.nio.file.Files

buildscript {
    repositories {
        mavenCentral()

        maven {
            url 'https://maven.services.pocolifo.com/releases'
        }

        maven {
            name 'gitlab-obf'
            url 'https://gitlab.pocolifo.com/api/v4/projects/21/packages/maven'

            credentials(HttpHeaderCredentials) {
                if (System.getenv("CI_JOB_TOKEN") == null) {
                    name = 'Private-Token'
                    value = gitLabPrivateToken
                } else {
                    name = 'Job-Token'
                    value = System.getenv("CI_JOB_TOKEN")
                }
            }

            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }

    dependencies {
        classpath 'com.pocolifo.obfuscator:engine:1.0-SNAPSHOT'
        classpath 'com.pocolifo.pocolifoclient.installer:api:2.0.2'
        classpath 'com.google.code.gson:gson:2.9.0'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.pocolifo.minecraftgradle' version '0.1-SNAPSHOT'
    id 'com.pocolifo.obfuscator.gradleplugin' version '1.0-SNAPSHOT'
}

group 'com.pocolifo'

def taskGroup = 'pocolifo-client'
def minecraftVersion = '1.8.9'
def launchMainClass = 'com.pocolifo.pocolifoclient.launch.LaunchArgumentInterceptor'
def tweakerClass = 'com.pocolifo.pocolifoclient.launch.PocolifoClientTweaker'
def mixinConfig = 'pocolifoclient.mixins.json'

boolean isCI = System.getenv("CI_JOB_TOKEN") != null
PocolifoClientVersion releaseVersion

if (isCI) {
    if (System.getenv("CI_COMMIT_BRANCH") == null) {
        releaseVersion = new PocolifoClientVersion(System.getenv("CI_COMMIT_TAG"))
    } else {
        releaseVersion = new PocolifoClientVersion("${System.getenv("CI_COMMIT_BRANCH")}+${System.getenv("CI_COMMIT_SHORT_SHA")}@${minecraftVersion}")
    }

    version releaseVersion.toString()
} else {
    version "local+dev@${minecraftVersion}"
}

repositories {
    mavenCentral()

    maven {
        url 'https://repo.spongepowered.org/maven/'
    }

    maven {
        url 'https://libraries.minecraft.net'
    }

    maven {
        url 'https://maven.services.pocolifo.com/releases'
    }

    maven {
        url 'https://jitpack.io'
    }

    maven {
        name 'gitlab-obf'
        url 'https://gitlab.pocolifo.com/api/v4/projects/21/packages/maven'

        credentials(HttpHeaderCredentials) {
            if (System.getenv("CI_JOB_TOKEN") == null) {
                name = 'Private-Token'
                value = gitLabPrivateToken
            } else {
                name = 'Job-Token'
                value = System.getenv("CI_JOB_TOKEN")
            }
        }

        authentication {
            header(HttpHeaderAuthentication)
        }
    }
}

Hosts.pocolifoClientAPI = "https://maven.services.pocolifo.com/pocolifoclient/v2/"

dependencies {
    minecraft mojang.client(minecraftVersion)

    // this is for mappings, do not replace 1.8.9 with the config mc version
    mappings formats.mcp('stable', '22', '1.8.9')

    // pocolifo
    modImplementation 'com.pocolifo:commons:1.2.0'
    modImplementation 'com.pocolifo.pocolifoclient.installer:api:2.0.2'
    modImplementation 'com.pocolifo:minecraft-api:1.2'

    // mixin
    modImplementation 'org.spongepowered:mixin:0.7.11-SNAPSHOT'
    modImplementation 'net.minecraft:launchwrapper:1.12'

    // possible switch at some point
    // implementation 'com.github.sp614x:LegacyLauncher:aff3a537ee'

    // mods
    modImplementation 'com.github.jagrosh:DiscordIPC:master-SNAPSHOT'

    // util & convenience
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    // obf
    compileOnly 'com.pocolifo.obfuscator:annotations:1.0-SNAPSHOT'

    // hack for now
    // put the obfuscated jar on the classpath so it is recognized during obfuscation
    runtimeClasspath files(new File(System.getProperty('user.home'), ".gradle/caches/minecraftgradle/versions/net.minecraft_client_${minecraftVersion}/net.minecraft_client_${minecraftVersion}.jar"))
}

minecraftgradle {
    if (releaseVersion != null) {
        id "Pocolifo Client ${releaseVersion.compatibility} (${releaseVersion.channel})"
    } else {
        id "Pocolifo Client ${minecraftVersion}"
    }

    mainClass launchMainClass

    customLaunchArguments.add('--tweakClass')
    customLaunchArguments.add(tweakerClass)

    prettyManifest false

    if (isCI) {
        deploymentVersion "${releaseVersion.channel}-${releaseVersion.revision}-${releaseVersion.compatibility}"
        deploymentUrl "${Hosts.pocolifoClientAPI}versions/${releaseVersion.toString()}/binary.jar"
        deploymentJar obfuscate.outputFile
    } else {
        PocolifoClientVersion version = new PocolifoClientVersion(project.version as String)
        deploymentVersion "${version.channel}-${version.revision}-${minecraftVersion}"
    }
}

jar {
    manifest.attributes(
            'TweakClass': tweakerClass,
            'MixinConfigs': mixinConfig,
            'TweakOrder': 0
    )
}

task dummyTask {}

obfuscate {
    dependsOn reobfuscate
    inputFile = provider(() -> reobfuscate.outputFile)
}

obfuscator {
    pass("GarbageMembersPass") {
        addFields = true
        addMethods = false
    }

    pass("AntiDecompileArchivePass") {
        fakeZipDirectory = false
    }

    pass("AntiDecompilePass") {
        parentDirectorySourceFileNames = false
    }

    pass("RemapNamesPass") {
        remapClassNames = true
        obfuscatedStringSupplier = new TwoLetterObfuscatedStringSupplier((char) 'I', (char) 'l')
    }

    pass("BytecodeScrambler") {
        enabled = false
    }

    pass("RemoveSourceHintsPass") {
        enabled = false
    }
}

generateVersionManifest.dependsOn(obfuscate)

task copyVersionToLauncher(dependsOn: generateVersionManifest) {
    group taskGroup

    doLast {
        def version = new PocolifoClientVersion(project.version as String)
        def plcInstall = new PocolifoClientInstallation(version)
        def install = new Installation(new InstallationOptions(plcInstall))

        // copy the jar
        copy {
            from {
                obfuscate.outputFile
            }

            into {
                new File(install.fileManager.libraries, plcInstall.getLibrary().getPath()).getParentFile()
            }

            rename {
                "${plcInstall.getLibrary().getName()}-${plcInstall.getLibrary().getVersion()}.${plcInstall.getLibrary().getExtension()}"
            }
        }

        // copy launcher metadata
        copy {
            from {
                jar.destinationDirectory.file("${minecraftgradle.getId()}.json")
            }

            into {
                new File(install.fileManager.versions, minecraftgradle.id)
            }
        }

        // install new profile
        def template = new VersionMetadataTemplate()
        template.id = minecraftgradle.id

        PocolifoClientLauncherProfile launcherProfile = new PocolifoClientLauncherProfile(template)
        launcherProfile.installProfile(install)
        launcherProfile.selectProfile(install)
    }
}

task generateVersionPublishFiles(dependsOn: generateVersionManifest) {
    group taskGroup

    doLast {
        // PLC version json
        // generate current version data
        def plcVersion = new PocolifoClientVersion(project.version as String)
        def version = new PocolifoClientVersionTemplate()

        version.versioning = [
                "id": plcVersion.id,
                "channel": plcVersion.channel,
                "revision": plcVersion.revision,
                "compatibility": plcVersion.compatibility
        ]

        version.assets = [
                "launcherMetadata": "versions/${plcVersion.id}/metadata.json",
                "clientBinary": "versions/${plcVersion.id}/binary.jar"
        ]

        version.releaseTime = (long) (System.currentTimeMillis() / 1000)

        // get released versions & add the new one
        def versions = new LinkedList<>()

        try {
            versions.addAll(PocolifoClientVersionTemplate.getVersions())
        } catch (FileNotFoundException ignored) {
            // versions.json doesn't exist on the server
            logger.lifecycle('[WARNING] versions.json does not exist on the server!! PROCEEDING ANYWAY.')
        }

        if (versions.parallelStream().anyMatch(v -> v.versioning.id == version.versioning.id)) {
            throw new RuntimeException("version with id ${version.versioning.id} already exists")
        }

        versions.addFirst(version)
        def plcVersionsJson = PocolifoClientVersionTemplate.GSON.toJson(versions)

        new File(generateVersionPublishFiles.temporaryDir, 'versions.json').text = plcVersionsJson

        def versionDir = new File(new File(generateVersionPublishFiles.temporaryDir, 'versions'), plcVersion.id)
        versionDir.mkdirs()

        Files.copy(jar.destinationDirectory.file("${minecraftgradle.getId()}.json").get().getAsFile().toPath(), new File(versionDir, 'metadata.json').toPath())
        Files.copy(obfuscate.outputFile, new File(versionDir, 'binary.jar').toPath())
    }
}

compileJava.doFirst {
    def packageName = 'com.pocolifo.pocolifoclient.launch'
    def className = 'BuildProperties'

    def props = [
            'VERSION': project.version.toString(),
            'ID': minecraftgradle.getId(),
            'NAME': 'Pocolifo Client'
    ]

    //// auto-generate class ////

    String buildPropsBase = """/*
 * This class is auto-generated. Everything you put in here will be automatically
 * replaced the next time you compile.
*/

package ${packageName};

public final class ${className} {
%s
}"""

    StringBuilder builder = new StringBuilder()

    for (prop in props) {
        builder.append('\tpublic static final String ')
                .append(prop.getKey())
                .append(' = "')
                .append(prop.getValue())
                .append('";')
                .append(System.lineSeparator())
    }

    String buildProps = String.format(buildPropsBase, builder.toString())
    def buildPropsFile = file("src/main/java/${packageName.replaceAll('\\.', '/')}/${className}.java")
    buildPropsFile.text = buildProps
}
